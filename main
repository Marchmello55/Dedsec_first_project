import os
import re
import logging

from telethon import TelegramClient, events
from config import Config, load_config
from database import requests as rq
from database import models
from telethon.errors import PeerFloodError


# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config: Config = load_config()
api_id = config.tg_bot.api_id
api_hash = config.tg_bot.api_hash

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
client = TelegramClient('session_name', api_id, api_hash, system_version="4.16.30-vxCUSTOM")


async def forward_message(from_chat: str, to_chat: str, message_id: int):
    try:
        await client.send_message('username', 'Testing Telethon!')
        await client.forward_messages(to_chat, message_id, from_chat)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ {from_chat} –≤ {to_chat}.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def comment_on_post(channel_username: str, post_id: int, comment_text: str):
    try:
        discussion = await client.get_messages(channel_username, ids=post_id)

        if discussion.replies and discussion.replies.replies:
            await client.send_message(
                entity=channel_username,
                message=comment_text,
                comment_to=post_id,
                parse_mode='markdown'
            )
            print(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø–æ—Å—Ç—É {post_id} –≤ –∫–∞–Ω–∞–ª–µ {channel_username}.")
        else:
            print(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É {post_id} –≤ –∫–∞–Ω–∞–ª–µ {channel_username}.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")



async def kanal(URL):
    i = 0
    async for message in client.iter_messages(URL):
        print(message.id, message.text)
        if message.media:
            await forward_message(from_chat=URL, message_id=message.id, to_chat = "@MJJGOAT")
        await comment_on_post(channel_username=URL, post_id=message.id, comment_text="–∑–±—Å –ø–æ—Å—Ç")
        i += 1
        if i >= 5:
            break


async def extract_telegram_links(text):
    pattern = r'(https?://t\.me/\w+|@[\w\d_]+)'
    matches = re.findall(pattern, text)
    return matches

@client.on(events.NewMessage(pattern=r'/start'))
async def start_command(event):
    await event.reply("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –î–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –Ω–∞–ø–∏—à–∏—Ç–µ /help.")

@client.on(events.NewMessage(pattern=r'/help'))
async def help_command(event):
    await event.reply("–Ø –º–æ–≥—É:\n"
                "/start - –ó–∞–ø—É—Å–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: '/start'.\n"
                "/search - –ü–æ–∏—Å–∫ –ª—é–¥–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: '/search —Ñ—É—Ç–±–æ–ª –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'.\n"
                "/url - –°–ø–∏—Å–æ–∫ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: '/url'.\n"
                "/take_url - –£–∫–∞–∑–∞–Ω–∏–µ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: '/take_url https://t.me/Tdsfkjjhv @dghusghi'.\n"
                "/include_url - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –û–î–ù–û–ì–û –∫–∞–Ω–∞–ª–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: '/include_url https://t.me/Tdsfkjjhv' –∏–ª–∏ '/include_url @dghusghi'.\n"
                "/stop - –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: '/stop'.\n"
                "/help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: '/help'.\n"
                "/balance - –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: '/balance'.\n"
                #–ï—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è '/', –Ω–æ –Ω–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã - –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                "/chat - –ü—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è!(–∫–æ–¥ –∏–∑ –æ–±—Ä–∞–∑—Ü–∞(–Ω–∞–ø—Ä—è–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatgpt)) üòä")

@client.on(events.NewMessage(pattern=r'/search'))
async def search_command(event):
    message_text = event.message.text.lower()
    interests_text = message_text.split("/search", 1)
    interests_text = [item for item in interests_text if item != ""]
    print(interests_text)
    if interests_text:
        user_id = event.sender_id
        await rq.add_new_user(user_id=user_id)
        await event.reply("–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞.")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        for REQUEST in interests_text:
            print(REQUEST)
            await rq.add_new_request(REQUEST=REQUEST)
            await rq.include_user_request(user_id=user_id, REQUESTS=REQUEST)
            await client.send_message(7787814237, f'{REQUEST}')
    else:
        await event.reply("–í –∫–æ–º–∞–Ω–¥–µ /search –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã: '/search –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '/search —Ñ—É—Ç–±–æ–ª'.") #–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∑–∞–ø—Ä–æ—Å–∞

@client.on(events.NewMessage(pattern=r'/take_url'))
async def take_url_command(event):
    message_text = event.message.text.lower()
    interests_text = message_text.split("/take_url", 1)
    if len(interests_text) > 1:
        interests_text = interests_text[1].strip().replace(" ", "\n")
        links = await extract_telegram_links(' '.join(interests_text))
        user_id = event.sender_id
        await rq.add_new_user(user_id=user_id)
        await event.reply("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —É—á—Ç—ë–Ω.")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        await rq.include_user_request(user_id=user_id, REQUESTS="–ö–∞—Å—Ç–æ–º")
        for link in links:
            await rq.update_url_user_id(user_id=user_id, URL=link)
            await kanal(URL=link)
    else:
        await event.reply(
            "–í –∫–æ–º–∞–Ω–¥–µ /take_url –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã: '/take_url https://t.me/Tdsfkjjhv @dghusghi'."
        )

@client.on(events.NewMessage(pattern=r'/url'))
async def url_command(event):
    user_id = event.sender_id
    await rq.add_new_user(user_id=user_id)
    URL = await rq.get_user_tg_id(user_id=user_id)
    if isinstance(URL, str):
        URL = [URL]
    URL = [item for item in URL if item.strip()]
    URL = "\n".join(URL)
    if URL:
        await event.reply(f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n{URL}")
    else:
        await event.reply(
            "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ /help."
        )

@client.on(events.NewMessage(pattern=r'/include_url'))
async def include_url_command(event):
    sender = await event.get_sender()
    message_text = event.message.text.lower()
    interests_text = message_text.split("/include_url", 1)
    interests_text = interests_text[1].strip().replace(" ", "\n")
    interests_text = await extract_telegram_links(' '.join(interests_text))
    await rq.include_url_user_id(user_id=sender.id, URL=interests_text)
    await event.reply("–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω.") #–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    await event.reply("–í –∫–æ–º–∞–Ω–¥–µ /include_url –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã: '/include_url https://t.me/Tdsfkjjhv' –∏–ª–∏ '/include_url @dghusghi'.") #–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∑–∞–ø—Ä–æ—Å–∞
    await event.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '/take_url'.") #–ë–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏

@client.on(events.NewMessage(pattern=r'/stop'))
async def stop_command(event):
    await event.reply("–ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.") #–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å


@client.on(events.NewMessage(pattern=r'/users'))
async def stop_command(event):
    list = []
    await event.reply("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: .") #–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å



@client.on(events.NewMessage(pattern=r'/balance'))
async def stop_command(event):
    await event.reply("–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—á–µ—Ç—É.")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å


@client.on(events.NewMessage())
async def handle_messages(event):
    sender = await event.get_sender()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç)
    if hasattr(sender, 'first_name') and sender.first_name:
        sender_name = sender.first_name  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif hasattr(sender, 'title') and sender.title:
        sender_name = sender.title  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞
    else:
        sender_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"  # –ù–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

    message_text = event.message.text.strip().lower()

    if event.is_private:
        if sender.id == 7787814237:
            links = await extract_telegram_links(message_text)
            for link in links:
                await kanal(URL=link)
        else:
            print(f"–ü–æ–ª—É—á–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name} (ID: {sender.id}): {message_text}")

            if "–ø—Ä–∏–≤–µ—Ç" in message_text:
                await event.reply(f"–ü—Ä–∏–≤–µ—Ç, {sender_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
            elif "–ø–æ–º–æ—â—å" in message_text:
                await event.reply(
                    "–Ø –º–æ–≥—É:\n"
                    "- –ù–∞–π—Ç–∏ –ª—é–¥–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º: –Ω–∞–ø–∏—à–∏ '–Ω–∞–π–¥–∏ –ª—é–¥–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º: —Å–ø–æ—Ä—Ç, –º—É–∑—ã–∫–∞'\n"
                    "- –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
                    "- –ü—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è! üòä"
                )
            elif "–Ω–∞–π–¥–∏ –ª—é–¥–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º:" in message_text:
                await process_interests(event, sender_name)
            # else:
            #     await event.reply(f"–Ø –Ω–µ –ø–æ–Ω—è–ª, {sender_name}. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å '–ø–æ–º–æ—â—å', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.")
    else:
        await handle_group_or_channel(event)


async def process_interests(event, sender_name):
    message_text = event.message.text.lower()
    interests_text = message_text.split("–Ω–∞–π–¥–∏ –ª—é–¥–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º:", 1)[1].strip()
    user_id = event.sender_id

    await rq.add_new_user(user_id=user_id)

    interests_list = [interest.strip() for interest in interests_text.split(",") if interest.strip()]
    for REQUEST in set(interests_list):
        await rq.add_new_request(REQUEST=REQUEST)
        await rq.include_user_request(user_id=user_id, REQUEST=REQUEST)

    print(f"{sender_name} —É–∫–∞–∑–∞–ª –∏–Ω—Ç–µ—Ä–µ—Å—ã: {interests_list}")
    await event.reply(f"–°–ø–∞—Å–∏–±–æ, {sender_name}! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(interests_list)}")


async def handle_group_or_channel(event):
    sender = await event.get_sender()
    message_text = event.message.text.strip().lower()
    if event.is_reply:
        original_message = await event.get_reply_message()
        if original_message.sender_id == (await client.get_me()).id:
            print("–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", event.message.text)
            await rq.add_chat_reaction_tg_id(tg_id=sender.id)
            chat = await event.get_chat()  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —á–∞—Ç–∞
            chat_link = None
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ username —É —á–∞—Ç–∞
            if hasattr(chat, 'username') and chat.username:
                chat_link = f"https://t.me/{chat.username}"
            elif hasattr(chat, 'id'):
                chat_link = f"tg://resolve?domain={chat.id}"  # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —á–∞—Ç–æ–≤ –±–µ–∑ username

            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç: {chat.title if hasattr(chat, 'title') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç'}")
            print(f"–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {chat_link}")

            # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Ç–µ
            if event.is_reply:
                original_message = await event.get_reply_message()
                await event.reply(f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat.title}.\n–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {chat_link}")
            else:
                await event.reply(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat.title}.\n–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {chat_link}")
        else:
            print("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")


async def main():
    await models.async_main()
    await client.start()
    print("–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
    await client.run_until_disconnected()


if __name__ == "__main__":
    client.loop.run_until_complete(main())
